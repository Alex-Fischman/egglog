use crate::ast::*;
use crate::*;

grammar;

pub Program: Vec<Command> = { (Command)* => <> }

List<T>: Vec<T> = { 
    "(" <T*> ")" => <>,
}

Command: Command = {
    "(" "datatype" <name:Ident> <variants:(Variant)*> ")" => Command::Datatype { <> },
    "(" "function" <name:Ident> <schema:Schema> ")" => Command::Function(name, schema),
    "(" "relation" <name:Ident> <types:List<Type>> ")" => Command::Function(name, Schema::relation(types)),
    "(" "rule" <name:Name?> <query:Query> <actions:List<Action>> ")" => Command::Rule(name, Rule {query, actions}),
    "(" "rewrite" <name:Name?> <lhs:Expr> <rhs:Expr> ")" => Command::Rule(name, Rule::rewrite(lhs, rhs)),
    <Action> => Command::Action(<>),
    "(" "run" <Num> ")" => Command::Run(<>.try_into().unwrap()),
    "(" "extract" <Expr> ")" => Command::Extract(<>),
    "(" "check-eq" <(Expr)+> ")" => Command::CheckEq(<>),
}

Name: Symbol = { "[" <Ident> "]" => <> }

Action: Action = {
    "(" "define" <Ident> <Expr> ")" => Action::Define(<>),
    "(" "union" <Expr*> ")" => Action::Union(<>),
    "(" "assert" <Expr*> ")" => Action::Assert(<>),
}

Schema: Schema = {
    <types:List<Type>> <output:Type> => Schema { input: types, output }
}

Query: Query = {
    <groups:List<List<Expr>>> => Query::from_groups(groups)
}

Expr: Expr = {
    <Num> => Expr::leaf(<>),
    <Bool> => Expr::leaf(<>),
    <Ident> => Expr::Var(<>),
    "(" <head:Ident> <tail:(Expr)*> ")" => Expr::Node(head, tail),
};

ExprList: Vec<Expr> = { "(" <sexps:(Expr)*> ")" => sexps }

Variant: Variant = {
    "(" <name:Ident> <types:(Type)*> ")" => Variant { <> },
}

Type: Type = { 
    "Int" => Type::Int,
    <Ident> => Type::Sort(<>),
}

Num: i64 = <s:r"[0-9]+"> => s.parse().unwrap();
Bool: bool = {
    "true" => true,
    "false" => false,
}
Ident: Symbol = <s:r"[[:alpha:]][\w-]*"> => s.parse().unwrap();